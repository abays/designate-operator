/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Generated by:
//
// operator-sdk create webhook --group designate --version v1beta1 --kind Designate --programmatic-validation --defaulting
//

package v1beta1

import (
	"fmt"

	"github.com/openstack-k8s-operators/lib-common/modules/common/service"
	apierrors "k8s.io/apimachinery/pkg/api/errors"
	topologyv1 "github.com/openstack-k8s-operators/infra-operator/apis/topology/v1beta1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/util/validation/field"
	ctrl "sigs.k8s.io/controller-runtime"
	logf "sigs.k8s.io/controller-runtime/pkg/log"
	"sigs.k8s.io/controller-runtime/pkg/webhook"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// DesignateDefaults -
type DesignateDefaults struct {
	APIContainerImageURL          string
	CentralContainerImageURL      string
	MdnsContainerImageURL         string
	ProducerContainerImageURL     string
	WorkerContainerImageURL       string
	Backendbind9ContainerImageURL string
	UnboundContainerImageURL      string
	NetUtilsURL                   string
	DesignateAPIRouteTimeout         int
}

var designateDefaults DesignateDefaults

// log is for logging in this package.
var designatelog = logf.Log.WithName("designate-resource")

// SetupDesignateDefaults - initialize Designate spec defaults for use with either internal or external webhooks
func SetupDesignateDefaults(defaults DesignateDefaults) {
	designateDefaults = defaults
	designatelog.Info("Designate defaults initialized", "defaults", defaults)
}

// SetupWebhookWithManager sets up the webhook with the Manager
func (r *Designate) SetupWebhookWithManager(mgr ctrl.Manager) error {
	return ctrl.NewWebhookManagedBy(mgr).
		For(r).
		Complete()
}

//+kubebuilder:webhook:path=/mutate-designate-openstack-org-v1beta1-designate,mutating=true,failurePolicy=fail,sideEffects=None,groups=designate.openstack.org,resources=designates,verbs=create;update,versions=v1beta1,name=mdesignate.kb.io,admissionReviewVersions=v1

var _ webhook.Defaulter = &Designate{}

// Default implements webhook.Defaulter so a webhook will be registered for the type
func (r *Designate) Default() {
	designatelog.Info("default", "name", r.Name)
	r.Spec.Default()
}

// Default  set defaults for this Designate spec
func (spec *DesignateSpec) Default() {
	if spec.DesignateAPI.ContainerImage == "" {
		spec.DesignateAPI.ContainerImage = designateDefaults.APIContainerImageURL
	}
	if spec.DesignateCentral.ContainerImage == "" {
		spec.DesignateCentral.ContainerImage = designateDefaults.CentralContainerImageURL
	}
	if spec.DesignateMdns.ContainerImage == "" {
		spec.DesignateMdns.ContainerImage = designateDefaults.MdnsContainerImageURL
	}
	if spec.DesignateMdns.NetUtilsImage == "" {
		spec.DesignateMdns.NetUtilsImage = designateDefaults.NetUtilsURL
	}
	if spec.DesignateProducer.ContainerImage == "" {
		spec.DesignateProducer.ContainerImage = designateDefaults.ProducerContainerImageURL
	}
	if spec.DesignateWorker.ContainerImage == "" {
		spec.DesignateWorker.ContainerImage = designateDefaults.WorkerContainerImageURL
	}
	if spec.DesignateBackendbind9.ContainerImage == "" {
		spec.DesignateBackendbind9.ContainerImage = designateDefaults.Backendbind9ContainerImageURL
	}
	if spec.DesignateBackendbind9.NetUtilsImage == "" {
		spec.DesignateBackendbind9.NetUtilsImage = designateDefaults.NetUtilsURL
	}
	if spec.DesignateUnbound.ContainerImage == "" {
		spec.DesignateUnbound.ContainerImage = designateDefaults.UnboundContainerImageURL
	}
}

func (spec *DesignateSpecCore) Default() {
	// validations go here for the ControlPlane
}

// TODO(user): change verbs to "verbs=create;update;delete" if you want to enable deletion validation.
//+kubebuilder:webhook:path=/validate-designate-openstack-org-v1beta1-designate,mutating=false,failurePolicy=fail,sideEffects=None,groups=designate.openstack.org,resources=designates,verbs=create;update,versions=v1beta1,name=vdesignate.kb.io,admissionReviewVersions=v1

var _ webhook.Validator = &Designate{}

// ValidateCreate implements webhook.Validator so a webhook will be registered for the type
func (r *Designate) ValidateCreate() (admission.Warnings, error) {
	designatelog.Info("validate create", "name", r.Name)

	var allErrs field.ErrorList
	basePath := field.NewPath("spec")

	allErrs = r.Spec.ValidateDesignateTopology(basePath, r.Namespace)
	if err := r.Spec.ValidateCreate(basePath); err != nil {
		allErrs = append(allErrs, err...)
	}

	if len(allErrs) != 0 {
		return nil, apierrors.NewInvalid(
			schema.GroupKind{Group: "designate.openstack.org", Kind: "Designate"},
			r.Name, allErrs)
	}

	return nil, nil
}

// ValidateCreate - Exported function wrapping non-exported validate functions,
// this function can be called externally to validate an designate spec.
func (r *DesignateSpec) ValidateCreate(basePath *field.Path) field.ErrorList {
	var allErrs field.ErrorList

	// validate the service override key is valid
	allErrs = append(allErrs, service.ValidateRoutedOverrides(
		basePath.Child("designateAPI").Child("override").Child("service"),
		r.DesignateAPI.Override.Service)...)

	return allErrs
}

func (r *DesignateSpecCore) ValidateCreate(basePath *field.Path) field.ErrorList {
	var allErrs field.ErrorList

	// validate the service override key is valid
	allErrs = append(allErrs, service.ValidateRoutedOverrides(
		basePath.Child("designateAPI").Child("override").Child("service"),
		r.DesignateAPI.Override.Service)...)

	return allErrs
}

// ValidateUpdate implements webhook.Validator so a webhook will be registered for the type
func (r *Designate) ValidateUpdate(old runtime.Object) (admission.Warnings, error) {
	designatelog.Info("validate update", "name", r.Name)

	oldDesignate, ok := old.(*Designate)
	if !ok || oldDesignate == nil {
		return nil, apierrors.NewInternalError(fmt.Errorf("unable to convert existing object"))
	}

	var allErrs field.ErrorList
	basePath := field.NewPath("spec")

	allErrs = r.Spec.ValidateDesignateTopology(basePath, r.Namespace)
	if err := r.Spec.ValidateUpdate(oldDesignate.Spec, basePath); err != nil {
		allErrs = append(allErrs, err...)
	}

	if len(allErrs) != 0 {
		return nil, apierrors.NewInvalid(
			schema.GroupKind{Group: "designate.openstack.org", Kind: "Designate"},
			r.Name, allErrs)
	}

	return nil, nil
}

// ValidateUpdate - Exported function wrapping non-exported validate functions,
// this function can be called externally to validate an designate spec.
func (r *DesignateSpec) ValidateUpdate(old DesignateSpec, basePath *field.Path) field.ErrorList {
	var allErrs field.ErrorList

	// validate the service override key is valid
	allErrs = append(allErrs, service.ValidateRoutedOverrides(
		basePath.Child("designateAPI").Child("override").Child("service"),
		r.DesignateAPI.Override.Service)...)

	return allErrs
}

func (r *DesignateSpecCore) ValidateUpdate(old DesignateSpecCore, basePath *field.Path) field.ErrorList {
	var allErrs field.ErrorList

	// validate the service override key is valid
	allErrs = append(allErrs, service.ValidateRoutedOverrides(
		basePath.Child("designateAPI").Child("override").Child("service"),
		r.DesignateAPI.Override.Service)...)

	return allErrs
}

// ValidateDelete implements webhook.Validator so a webhook will be registered for the type
func (r *Designate) ValidateDelete() (admission.Warnings, error) {
	designatelog.Info("validate delete", "name", r.Name)

	// TODO(user): fill in your validation logic upon object deletion.
	return nil, nil
}

func (spec *DesignateSpecCore) GetDefaultRouteAnnotations() (annotations map[string]string) {
	return map[string]string{
		"haproxy.router.openshift.io/timeout": fmt.Sprintf("%ds", designateDefaults.DesignateAPIRouteTimeout),
	}
}

// SetDefaultRouteAnnotations sets HAProxy timeout values of the route
func (spec *DesignateSpecCore) SetDefaultRouteAnnotations(annotations map[string]string) {
	const haProxyAnno = "haproxy.router.openshift.io/timeout"
	// Use a custom annotation to flag when the operator has set the default HAProxy timeout
	// With the annotation func determines when to overwrite existing HAProxy timeout with the APITimeout
	const designateAnno = "api.designate.openstack.org/timeout"

	valDesignate, okDesignate := annotations[designateAnno]
	valHAProxy, okHAProxy := annotations[haProxyAnno]

	// Human operator set the HAProxy timeout manually
	if !okDesignate && okHAProxy {
		return
	}

	// Human operator modified the HAProxy timeout manually without removing the Designate flag
	if okDesignate && okHAProxy && valDesignate != valHAProxy {
		delete(annotations, designateAnno)
		return
	}

	timeout := fmt.Sprintf("%ds", spec.APITimeout)
	annotations[designateAnno] = timeout
	annotations[haProxyAnno] = timeout
}

// ValidateDesignateTopology - Returns an ErrorList if the Topology is referenced
// on a different namespace
func (spec *DesignateSpec) ValidateDesignateTopology(basePath *field.Path, namespace string) field.ErrorList {
	var allErrs field.ErrorList

	// When a TopologyRef CR is referenced, fail if a different Namespace is
	// referenced because is not supported
	if spec.TopologyRef != nil {
		if err := topologyv1.ValidateTopologyNamespace(spec.TopologyRef.Namespace, *basePath, namespace); err != nil {
			allErrs = append(allErrs, err)
		}
	}

	// When a TopologyRef CR is referenced with an override to DesignateAPI, fail
	// if a different Namespace is referenced because not supported
	if spec.DesignateAPI.TopologyRef != nil {
		if err := topologyv1.ValidateTopologyNamespace(spec.DesignateAPI.TopologyRef.Namespace, *basePath, namespace); err != nil {
			allErrs = append(allErrs, err)
		}
	}

	// When a TopologyRef CR is referenced with an override to DesignateBackendbind9
	// fail if a different Namespace is referenced because not supported
	if spec.DesignateBackendbind9.TopologyRef != nil {
		if err := topologyv1.ValidateTopologyNamespace(spec.DesignateBackendbind9.TopologyRef.Namespace, *basePath, namespace); err != nil {
			allErrs = append(allErrs, err)
		}
	}

	// When a TopologyRef CR is referenced with an override to an instance of
	// DesignateCentral, fail if a different Namespace is referenced because not
	// supported
	if spec.DesignateCentral.TopologyRef != nil {
		if err := topologyv1.ValidateTopologyNamespace(spec.DesignateCentral.TopologyRef.Namespace, *basePath, namespace); err != nil {
			allErrs = append(allErrs, err)
		}
	}

	// When a TopologyRef CR is referenced with an override to an instance of
	// DesignateMDNS, fail if a different Namespace is referenced because not
	// supported
	if spec.DesignateMdns.TopologyRef != nil {
		if err := topologyv1.ValidateTopologyNamespace(spec.DesignateMdns.TopologyRef.Namespace, *basePath, namespace); err != nil {
			allErrs = append(allErrs, err)
		}
	}

	// When a TopologyRef CR is referenced with an override to an instance of
	// DesignateProducer, fail if a different Namespace is referenced because not
	// supported
	if spec.DesignateProducer.TopologyRef != nil {
		if err := topologyv1.ValidateTopologyNamespace(spec.DesignateProducer.TopologyRef.Namespace, *basePath, namespace); err != nil {
			allErrs = append(allErrs, err)
		}
	}

	// When a TopologyRef CR is referenced with an override to an instance of
	// DesignateUnbound, fail if a different Namespace is referenced because not
	// supported
	if spec.DesignateUnbound.TopologyRef != nil {
		if err := topologyv1.ValidateTopologyNamespace(spec.DesignateUnbound.TopologyRef.Namespace, *basePath, namespace); err != nil {
			allErrs = append(allErrs, err)
		}
	}

	// When a TopologyRef CR is referenced with an override to an instance of
	// DesignateWorker, fail if a different Namespace is referenced because not
	// supported
	if spec.DesignateWorker.TopologyRef != nil {
		if err := topologyv1.ValidateTopologyNamespace(spec.DesignateWorker.TopologyRef.Namespace, *basePath, namespace); err != nil {
			allErrs = append(allErrs, err)
		}
	}

	return allErrs
}
