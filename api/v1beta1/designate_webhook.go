/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Generated by:
//
// operator-sdk create webhook --group designate --version v1beta1 --kind Designate --programmatic-validation --defaulting
//

package v1beta1

import (
	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	logf "sigs.k8s.io/controller-runtime/pkg/log"
	"sigs.k8s.io/controller-runtime/pkg/webhook"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// DesignateDefaults -
type DesignateDefaults struct {
	APIContainerImageURL          string
	CentralContainerImageURL      string
	MdnsContainerImageURL         string
	ProducerContainerImageURL     string
	WorkerContainerImageURL       string
	Backendbind9ContainerImageURL string
	UnboundContainerImageURL      string
}

var designateDefaults DesignateDefaults

// log is for logging in this package.
var designatelog = logf.Log.WithName("designate-resource")

// SetupDesignateDefaults - initialize Designate spec defaults for use with either internal or external webhooks
func SetupDesignateDefaults(defaults DesignateDefaults) {
	designateDefaults = defaults
	designatelog.Info("Designate defaults initialized", "defaults", defaults)
}

// SetupWebhookWithManager sets up the webhook with the Manager
func (r *Designate) SetupWebhookWithManager(mgr ctrl.Manager) error {
	return ctrl.NewWebhookManagedBy(mgr).
		For(r).
		Complete()
}

//+kubebuilder:webhook:path=/mutate-designate-openstack-org-v1beta1-designate,mutating=true,failurePolicy=fail,sideEffects=None,groups=designate.openstack.org,resources=designates,verbs=create;update,versions=v1beta1,name=mdesignate.kb.io,admissionReviewVersions=v1

var _ webhook.Defaulter = &Designate{}

// Default implements webhook.Defaulter so a webhook will be registered for the type
func (r *Designate) Default() {
	designatelog.Info("default", "name", r.Name)
	r.Spec.Default()
}

// Default  set defaults for this Designate spec
func (spec *DesignateSpec) Default() {
	if spec.DesignateAPI.ContainerImage == "" {
		spec.DesignateAPI.ContainerImage = designateDefaults.APIContainerImageURL
	}
	if spec.DesignateCentral.ContainerImage == "" {
		spec.DesignateCentral.ContainerImage = designateDefaults.CentralContainerImageURL
	}
	if spec.DesignateMdns.ContainerImage == "" {
		spec.DesignateMdns.ContainerImage = designateDefaults.MdnsContainerImageURL
	}
	if spec.DesignateProducer.ContainerImage == "" {
		spec.DesignateProducer.ContainerImage = designateDefaults.ProducerContainerImageURL
	}
	if spec.DesignateWorker.ContainerImage == "" {
		spec.DesignateWorker.ContainerImage = designateDefaults.WorkerContainerImageURL
	}
	if spec.DesignateBackendbind9.ContainerImage == "" {
		spec.DesignateBackendbind9.ContainerImage = designateDefaults.Backendbind9ContainerImageURL
	}
	if spec.DesignateUnbound.ContainerImage == "" {
		spec.DesignateUnbound.ContainerImage = designateDefaults.UnboundContainerImageURL
	}
}

func (spec *DesignateSpecCore) Default() {
	// validations go here for the ControlPlane
}

// TODO(user): change verbs to "verbs=create;update;delete" if you want to enable deletion validation.
//+kubebuilder:webhook:path=/validate-designate-openstack-org-v1beta1-designate,mutating=false,failurePolicy=fail,sideEffects=None,groups=designate.openstack.org,resources=designates,verbs=create;update,versions=v1beta1,name=vdesignate.kb.io,admissionReviewVersions=v1

var _ webhook.Validator = &Designate{}

// ValidateCreate implements webhook.Validator so a webhook will be registered for the type
func (r *Designate) ValidateCreate() (admission.Warnings, error) {
	designatelog.Info("validate create", "name", r.Name)

	// TODO(user): fill in your validation logic upon object creation.
	return nil, nil
}

// ValidateUpdate implements webhook.Validator so a webhook will be registered for the type
func (r *Designate) ValidateUpdate(old runtime.Object) (admission.Warnings, error) {
	designatelog.Info("validate update", "name", r.Name)

	// TODO(user): fill in your validation logic upon object update.
	return nil, nil
}

// ValidateDelete implements webhook.Validator so a webhook will be registered for the type
func (r *Designate) ValidateDelete() (admission.Warnings, error) {
	designatelog.Info("validate delete", "name", r.Name)

	// TODO(user): fill in your validation logic upon object deletion.
	return nil, nil
}
